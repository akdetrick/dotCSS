autoscale: false
build-lists: true
theme: simple, 2

![](hammer.jpeg)

---

![](breaking.jpeg)

^Funny thing about hammers - there are more things you can break with a hammer than you can fix with a hammer

---

# A hammer, in CSS

```css
#sidebar .post .meta > a.author {
	text-decoration: underline !important;
	color: #0366d6 !important;
	font-style: italic !important;
}
```

^Selecting an element and bludgeoning it with style properties until it looks right
^It is a blunt instrument for styling, and usually does more damage than good

---

```css, [.highlight: 1]
#sidebar .post .meta > a.author {
	text-decoration: underline !important;
	color: #0366d6 !important;
	font-style: italic !important;
}
```

![inline 100%](specificity.png) [^1]

[^1]: https://specificity.keegan.st/

^This is often done intentionally to override other styles

---

```css, [.highlight: 2-4]
#sidebar .post .meta > a.author {
	text-decoration: underline !important;
	color: #0366d6 !important;
	font-style: italic !important;
}
```

# [fit] :fire: `!important` :fire:

^Clearly, someone was trying to select one specific element, in a specific area, on a specific page, to bludgeon it with styles until it looked correct

---

# [fit] _just make it work_

---

* Most of us have seen CSS like this
* Many of us have _written_ CSS like this
* _I have written CSS like this_

---

![left](meetup.png)

# Adam Detrick
## _@akdetrick_

## **I work for [Meetup](www.meetup.com)**

---

# [fit] Why do we resort to using CSS as a blunt instrument?

---

> Itâ€™s harder to read code
> than to write it.
-- Joel Spolsky

^CSS presents its own layer of extra difficulty

---

> CSS is especially difficult to
> reason about
-- Me, right now on stage

---

# CSS is a render blocking resource.

![inline 170%](crp.png)[^2]

[^2]: Grigorik, I. - Deciphering the Critical Rendering Path. Retrieved from https://calendar.perfplanet.com/2012/deciphering-the-critical-rendering-path/

^CSS blocks this process until it is fully downloaded and parsed.

---

![](css.png)

---

![](css.png)

# **it's impossible to build a complete mental model of the cascade when reading CSS**

---

# [fit] **READING CSS**
# [fit] **IS HARD**

---


## [fit] technical problems
## [fit] !==
## [fit] people problems

^We often misidentify a "people problem" as a technical problem, and not all technical problems are best solved with technical solutions
^If you ignore people problems, you can't fix them

---

# _Conway's Law_

> organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations
-- Melvin Conway. _"How Do Committees Invent?"_ 1968

---

# Code reflecting communication structure
team A doesn't know that team B already did a thing like this

**Find SDS pitch presentation!**

---

# "The CSS snowball effect"
we have 12 components that do the same thing and I can write a better one

---

# "The CSS snowball effect"
deadline, just override to get it done

---

# "The CSS snowball effect"
design inconsistency

---

# "The CSS snowball effect"
"this CSS is too complicated" -> make it more complicated -> GOTO 0

---

# [fit] How do we break the cycle?

---

# Make it your goal to
# [fit] **WRITE LESS CSS**

---

## Breaking the cycle

* start thinking about the developer experience
* think about the decision point at which developers need to add more CSS

---

## Utility classes

(flush modifiers)
"if these classes already exist and are easier to remember, you don't have to write extra CSS"

---

# CLASSES part 2

* "style by memory"
* apply classes to markup instead of selectors to CSS
* make it less necessary to write CSS

---

![inline](article.png)

---

## Content-derived class names

```html
<div class="event">
	<h1 class="event__title">Star Wars: The ...
	<p class="event__date">Dec 20, 2015</p>
	<p class="event__location">Ritz East, Phil...
</div>
```

---

## "Expressive CSS" presentational classes

```html
<div class="pos-bottom pos-left text-white">
	<h1 class="text-reg pad-2-top">Star Wars: The ...
	<p class="bold">Dec 20, 2015</p>
	<p class="text-small">Ritz East, Phil...
</div>
```

---

# Presentational classes are scary

* _"there are too many class names in one element, and the class name doesn't   describe the actual meaning [of the content]"_
* _"I hope this is a cruel joke that you're trying to play on people, because this sounds like the worst idea I've ever seen for CSS! You may as well be writing all your CSS with inline style tags."_
* _"What's this shit. You write CSS like 5 years ago."_

---

```html
<div class="pos-bottom pos-left text-white">
	<h1 class="text-reg pad-2-top">Star Wars: The ...
	<datetime class="bold">Dec 20, 2015</datetime>
	<p class="text-small">Ritz East, Phil...
</div>
```

---

```html
<div class="event">
	<h1>Star Wars: The ...
	<datetime>Dec 20, 2015</datetime>
	<p>Ritz East, Phil...
</div>
```

---

```css
.event { ... }
.event h1 { ... }
.event datetime { ... }
.event p { ... }
```

---

# Don't forget to
# [fit] **WRITE LESS CSS!**

---

# Classes for styling; tags for semantics

## Who will be reading your class names?

* __Users?__ Other attributes (`rel`, `role`, `title`, `alt`) are more useful than `class`
* __Machines?__ Tag choices and metadata (`itemscope`/`itemprop`) are more descriptive than `class`
* __Developers!__ The `class` attribute is most useful to developers building features

---

# Level of abstraction

```css
.border--top--black-xl { ... }
.padding--left-21px { ... }
```

^You can easily imagine this getting out of hand

---

# show design-driven abstractions (text specimen)

---

# [fit] Foster a better relationship between engineering and design


^Maybe mention the previous "bridging the gap" presentation at dotCSS
^You can't create useful abstractions without cooperation from design


---

# Design relationship part 1

* Speak the same language
* create a sense of shared ownership
* debate, then **decide** together

---

# "Speak the same language"

(show style-dictionary)

1. show screenshot of colors (name all the things to speak the same lang)
2. show how the code is for use in product AND documentation

---

# [fit] Static documentation is
# [fit] a lie waiting to happen

---

# "debate, then **decide**

(show storybook)

1. With documentation generated from source, you can declare "_this_ is our standard button component"
2. When design inconsistency occurs, use it as an opportunity to spark a debate
3. record the decisions in the standard component

---

# "shared sense of ownership"

(show icons)

1. introduce sketch-cli (you can export things from sketch files with a script)
2. show our artboards
3. show how this is used to generate distributions
4. designers control the point of truth and engineers use it

---

# "The CSS snowball effect"
design inconsistency

^This is a major contributor to CSS technical debt...

---

# [fit] CSS is better when
# [fit] you write less of it

---

![left](meetup.png)

_@akdetrick_


<br />
`style-dictionary`:
[github.com/amzn/style-dictionary](https://github.com/amzn/style-dictionary)


<br />
Relevant Meetup projects:
[github.com/meetup/swarm-sasstools](https://github.com/meetup/swarm-sasstools)
[github.com/meetup/swarm-icons](https://github.com/meetup/swarm-icons)

<br />
Meetup tech blog:
[medium.com/making-meetup](https://medium.com/making-meetup)
